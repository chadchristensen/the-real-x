# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  households(where: HouseholdWhereInput! = {}, orderBy: [HouseholdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HouseholdWhereUniqueInput): [Household!]
  householdsCount(where: HouseholdWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  households: HouseholdManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input HouseholdManyRelationFilter {
  every: HouseholdWhereInput
  some: HouseholdWhereInput
  none: HouseholdWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  households: HouseholdRelateToManyForUpdateInput
}

input HouseholdRelateToManyForUpdateInput {
  disconnect: [HouseholdWhereUniqueInput!]
  set: [HouseholdWhereUniqueInput!]
  create: [HouseholdCreateInput!]
  connect: [HouseholdWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  households: HouseholdRelateToManyForCreateInput
}

input HouseholdRelateToManyForCreateInput {
  create: [HouseholdCreateInput!]
  connect: [HouseholdWhereUniqueInput!]
}

type Household {
  id: ID!
  name: String
  members(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  membersCount(where: UserWhereInput! = {}): Int
}

input HouseholdWhereUniqueInput {
  id: ID
}

input HouseholdWhereInput {
  AND: [HouseholdWhereInput!]
  OR: [HouseholdWhereInput!]
  NOT: [HouseholdWhereInput!]
  id: IDFilter
  name: StringFilter
  members: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input HouseholdOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input HouseholdUpdateInput {
  name: String
  members: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input HouseholdUpdateArgs {
  where: HouseholdWhereUniqueInput!
  data: HouseholdUpdateInput!
}

input HouseholdCreateInput {
  name: String
  members: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Ingredient {
  id: ID!
  name: String
}

input IngredientWhereUniqueInput {
  id: ID
}

input IngredientWhereInput {
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
  id: IDFilter
  name: StringFilter
}

input IngredientOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input IngredientUpdateInput {
  name: String
}

input IngredientUpdateArgs {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateInput!
}

input IngredientCreateInput {
  name: String
}

type Meal {
  id: ID!
  name: String
  preparationTime: Int
  cookingTime: Int
  servings: Int
  difficultyLevel: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input MealWhereUniqueInput {
  id: ID
}

input MealWhereInput {
  AND: [MealWhereInput!]
  OR: [MealWhereInput!]
  NOT: [MealWhereInput!]
  id: IDFilter
  name: StringFilter
  preparationTime: IntNullableFilter
  cookingTime: IntNullableFilter
  servings: IntNullableFilter
  difficultyLevel: StringFilter
  tags: TagManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input MealOrderByInput {
  id: OrderDirection
  name: OrderDirection
  preparationTime: OrderDirection
  cookingTime: OrderDirection
  servings: OrderDirection
  difficultyLevel: OrderDirection
}

input MealUpdateInput {
  name: String
  preparationTime: Int
  cookingTime: Int
  servings: Int
  difficultyLevel: String
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input MealUpdateArgs {
  where: MealWhereUniqueInput!
  data: MealUpdateInput!
}

input MealCreateInput {
  name: String
  preparationTime: Int
  cookingTime: Int
  servings: Int
  difficultyLevel: String
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Recipe {
  id: ID!
  name: String
  notes: String
  ingredients(where: RecipeIngredientWhereInput! = {}, orderBy: [RecipeIngredientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeIngredientWhereUniqueInput): [RecipeIngredient!]
  ingredientsCount(where: RecipeIngredientWhereInput! = {}): Int
  instructions(where: RecipeInstructionWhereInput! = {}, orderBy: [RecipeInstructionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeInstructionWhereUniqueInput): [RecipeInstruction!]
  instructionsCount(where: RecipeInstructionWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input RecipeWhereUniqueInput {
  id: ID
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
  id: IDFilter
  name: StringFilter
  notes: StringFilter
  ingredients: RecipeIngredientManyRelationFilter
  instructions: RecipeInstructionManyRelationFilter
  tags: TagManyRelationFilter
}

input RecipeIngredientManyRelationFilter {
  every: RecipeIngredientWhereInput
  some: RecipeIngredientWhereInput
  none: RecipeIngredientWhereInput
}

input RecipeInstructionManyRelationFilter {
  every: RecipeInstructionWhereInput
  some: RecipeInstructionWhereInput
  none: RecipeInstructionWhereInput
}

input RecipeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  notes: OrderDirection
}

input RecipeUpdateInput {
  name: String
  notes: String
  ingredients: RecipeIngredientRelateToManyForUpdateInput
  instructions: RecipeInstructionRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input RecipeIngredientRelateToManyForUpdateInput {
  disconnect: [RecipeIngredientWhereUniqueInput!]
  set: [RecipeIngredientWhereUniqueInput!]
  create: [RecipeIngredientCreateInput!]
  connect: [RecipeIngredientWhereUniqueInput!]
}

input RecipeInstructionRelateToManyForUpdateInput {
  disconnect: [RecipeInstructionWhereUniqueInput!]
  set: [RecipeInstructionWhereUniqueInput!]
  create: [RecipeInstructionCreateInput!]
  connect: [RecipeInstructionWhereUniqueInput!]
}

input RecipeUpdateArgs {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateInput!
}

input RecipeCreateInput {
  name: String
  notes: String
  ingredients: RecipeIngredientRelateToManyForCreateInput
  instructions: RecipeInstructionRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

input RecipeIngredientRelateToManyForCreateInput {
  create: [RecipeIngredientCreateInput!]
  connect: [RecipeIngredientWhereUniqueInput!]
}

input RecipeInstructionRelateToManyForCreateInput {
  create: [RecipeInstructionCreateInput!]
  connect: [RecipeInstructionWhereUniqueInput!]
}

type RecipeIngredient {
  id: ID!
  ingredient: Ingredient
  quantity: Float
  unitOfMeasurement: String
}

input RecipeIngredientWhereUniqueInput {
  id: ID
}

input RecipeIngredientWhereInput {
  AND: [RecipeIngredientWhereInput!]
  OR: [RecipeIngredientWhereInput!]
  NOT: [RecipeIngredientWhereInput!]
  id: IDFilter
  ingredient: IngredientWhereInput
  quantity: FloatFilter
  unitOfMeasurement: StringFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input RecipeIngredientOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  unitOfMeasurement: OrderDirection
}

input RecipeIngredientUpdateInput {
  ingredient: IngredientRelateToOneForUpdateInput
  quantity: Float
  unitOfMeasurement: String
}

input IngredientRelateToOneForUpdateInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
  disconnect: Boolean
}

input RecipeIngredientUpdateArgs {
  where: RecipeIngredientWhereUniqueInput!
  data: RecipeIngredientUpdateInput!
}

input RecipeIngredientCreateInput {
  ingredient: IngredientRelateToOneForCreateInput
  quantity: Float
  unitOfMeasurement: String
}

input IngredientRelateToOneForCreateInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
}

type RecipeInstruction {
  id: ID!
  description: String
  stepNumber: Int
}

input RecipeInstructionWhereUniqueInput {
  id: ID
}

input RecipeInstructionWhereInput {
  AND: [RecipeInstructionWhereInput!]
  OR: [RecipeInstructionWhereInput!]
  NOT: [RecipeInstructionWhereInput!]
  id: IDFilter
  description: StringFilter
  stepNumber: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input RecipeInstructionOrderByInput {
  id: OrderDirection
  description: OrderDirection
  stepNumber: OrderDirection
}

input RecipeInstructionUpdateInput {
  description: String
  stepNumber: Int
}

input RecipeInstructionUpdateArgs {
  where: RecipeInstructionWhereUniqueInput!
  data: RecipeInstructionUpdateInput!
}

input RecipeInstructionCreateInput {
  description: String
  stepNumber: Int
}

type ScheduledMeal {
  id: ID!
  date: CalendarDay
  meal: Meal
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ScheduledMealWhereUniqueInput {
  id: ID
}

input ScheduledMealWhereInput {
  AND: [ScheduledMealWhereInput!]
  OR: [ScheduledMealWhereInput!]
  NOT: [ScheduledMealWhereInput!]
  id: IDFilter
  date: CalendarDayFilter
  meal: MealWhereInput
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input ScheduledMealOrderByInput {
  id: OrderDirection
  date: OrderDirection
}

input ScheduledMealUpdateInput {
  date: CalendarDay
  meal: MealRelateToOneForUpdateInput
}

input MealRelateToOneForUpdateInput {
  create: MealCreateInput
  connect: MealWhereUniqueInput
  disconnect: Boolean
}

input ScheduledMealUpdateArgs {
  where: ScheduledMealWhereUniqueInput!
  data: ScheduledMealUpdateInput!
}

input ScheduledMealCreateInput {
  date: CalendarDay
  meal: MealRelateToOneForCreateInput
}

input MealRelateToOneForCreateInput {
  create: MealCreateInput
  connect: MealWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  collection: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  collection: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  collection: OrderDirection
}

input TagUpdateInput {
  name: String
  collection: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  collection: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createHousehold(data: HouseholdCreateInput!): Household
  createHouseholds(data: [HouseholdCreateInput!]!): [Household]
  updateHousehold(where: HouseholdWhereUniqueInput!, data: HouseholdUpdateInput!): Household
  updateHouseholds(data: [HouseholdUpdateArgs!]!): [Household]
  deleteHousehold(where: HouseholdWhereUniqueInput!): Household
  deleteHouseholds(where: [HouseholdWhereUniqueInput!]!): [Household]
  createIngredient(data: IngredientCreateInput!): Ingredient
  createIngredients(data: [IngredientCreateInput!]!): [Ingredient]
  updateIngredient(where: IngredientWhereUniqueInput!, data: IngredientUpdateInput!): Ingredient
  updateIngredients(data: [IngredientUpdateArgs!]!): [Ingredient]
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteIngredients(where: [IngredientWhereUniqueInput!]!): [Ingredient]
  createMeal(data: MealCreateInput!): Meal
  createMeals(data: [MealCreateInput!]!): [Meal]
  updateMeal(where: MealWhereUniqueInput!, data: MealUpdateInput!): Meal
  updateMeals(data: [MealUpdateArgs!]!): [Meal]
  deleteMeal(where: MealWhereUniqueInput!): Meal
  deleteMeals(where: [MealWhereUniqueInput!]!): [Meal]
  createRecipe(data: RecipeCreateInput!): Recipe
  createRecipes(data: [RecipeCreateInput!]!): [Recipe]
  updateRecipe(where: RecipeWhereUniqueInput!, data: RecipeUpdateInput!): Recipe
  updateRecipes(data: [RecipeUpdateArgs!]!): [Recipe]
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteRecipes(where: [RecipeWhereUniqueInput!]!): [Recipe]
  createRecipeIngredient(data: RecipeIngredientCreateInput!): RecipeIngredient
  createRecipeIngredients(data: [RecipeIngredientCreateInput!]!): [RecipeIngredient]
  updateRecipeIngredient(where: RecipeIngredientWhereUniqueInput!, data: RecipeIngredientUpdateInput!): RecipeIngredient
  updateRecipeIngredients(data: [RecipeIngredientUpdateArgs!]!): [RecipeIngredient]
  deleteRecipeIngredient(where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  deleteRecipeIngredients(where: [RecipeIngredientWhereUniqueInput!]!): [RecipeIngredient]
  createRecipeInstruction(data: RecipeInstructionCreateInput!): RecipeInstruction
  createRecipeInstructions(data: [RecipeInstructionCreateInput!]!): [RecipeInstruction]
  updateRecipeInstruction(where: RecipeInstructionWhereUniqueInput!, data: RecipeInstructionUpdateInput!): RecipeInstruction
  updateRecipeInstructions(data: [RecipeInstructionUpdateArgs!]!): [RecipeInstruction]
  deleteRecipeInstruction(where: RecipeInstructionWhereUniqueInput!): RecipeInstruction
  deleteRecipeInstructions(where: [RecipeInstructionWhereUniqueInput!]!): [RecipeInstruction]
  createScheduledMeal(data: ScheduledMealCreateInput!): ScheduledMeal
  createScheduledMeals(data: [ScheduledMealCreateInput!]!): [ScheduledMeal]
  updateScheduledMeal(where: ScheduledMealWhereUniqueInput!, data: ScheduledMealUpdateInput!): ScheduledMeal
  updateScheduledMeals(data: [ScheduledMealUpdateArgs!]!): [ScheduledMeal]
  deleteScheduledMeal(where: ScheduledMealWhereUniqueInput!): ScheduledMeal
  deleteScheduledMeals(where: [ScheduledMealWhereUniqueInput!]!): [ScheduledMeal]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  households(where: HouseholdWhereInput! = {}, orderBy: [HouseholdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HouseholdWhereUniqueInput): [Household!]
  household(where: HouseholdWhereUniqueInput!): Household
  householdsCount(where: HouseholdWhereInput! = {}): Int
  ingredients(where: IngredientWhereInput! = {}, orderBy: [IngredientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IngredientWhereUniqueInput): [Ingredient!]
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  meals(where: MealWhereInput! = {}, orderBy: [MealOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MealWhereUniqueInput): [Meal!]
  meal(where: MealWhereUniqueInput!): Meal
  mealsCount(where: MealWhereInput! = {}): Int
  recipes(where: RecipeWhereInput! = {}, orderBy: [RecipeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeWhereUniqueInput): [Recipe!]
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipesCount(where: RecipeWhereInput! = {}): Int
  recipeIngredients(where: RecipeIngredientWhereInput! = {}, orderBy: [RecipeIngredientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeIngredientWhereUniqueInput): [RecipeIngredient!]
  recipeIngredient(where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  recipeIngredientsCount(where: RecipeIngredientWhereInput! = {}): Int
  recipeInstructions(where: RecipeInstructionWhereInput! = {}, orderBy: [RecipeInstructionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeInstructionWhereUniqueInput): [RecipeInstruction!]
  recipeInstruction(where: RecipeInstructionWhereUniqueInput!): RecipeInstruction
  recipeInstructionsCount(where: RecipeInstructionWhereInput! = {}): Int
  scheduledMeals(where: ScheduledMealWhereInput! = {}, orderBy: [ScheduledMealOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScheduledMealWhereUniqueInput): [ScheduledMeal!]
  scheduledMeal(where: ScheduledMealWhereUniqueInput!): ScheduledMeal
  scheduledMealsCount(where: ScheduledMealWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
